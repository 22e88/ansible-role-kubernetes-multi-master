---
- name: Initial cluster
  set_fact:
    initial_cluster: "{{ ansible_hostname }}=https://{{ kubernetes_apiserver_advertise_address }}:2380"
    initial_cluster_token: "{{ lookup('password', '/dev/null') }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups[kubernetes_controllers_group] }}"

- name: Create kubeadm init config
  template:
    src: kubeadm_init_config.yml.j2
    dest: /root/kubeadm_init_config.yml

- name: Initialize Kubernetes master with kubeadm init.
  command: >
    kubeadm init
    --config /root/kubeadm_init_config.yml
    --ignore-preflight-errors={{ kubernetes_ignore_preflight_errors }}
  register: kubeadmin_init
  when: not kubernetes_init_stat.stat.exists

- name: Print the init output to screen.
  debug:
    var: kubeadmin_init.stdout
    verbosity: 2
  when: not kubernetes_init_stat.stat.exists

- name: Ensure .kube directory exists.
  file:
    path: ~/.kube
    state: directory

- name: Symlink the kubectl admin.conf to ~/.kube/conf.
  file:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    state: link

- name: Configure Flannel networking.
  command: "{{ item }}"
  with_items:
    - kubectl apply -f {{ kubernetes_flannel_manifest_file_rbac }}
    - kubectl apply -f {{ kubernetes_flannel_manifest_file }}
  register: flannel_result
  changed_when: "'created' in flannel_result.stdout"
  when: kubernetes_pod_network.cni == 'flannel'

- name: Configure Calico networking.
  command: "{{ item }}"
  with_items:
    - kubectl apply -f {{ kubernetes_calico_manifest_file }}
  register: calico_result
  changed_when: "'created' in calico_result.stdout"
  when: kubernetes_pod_network.cni == 'calico'

- name: Get Kubernetes version for Weave installation.
  shell: kubectl version | base64 | tr -d '\n'
  changed_when: false
  register: kubectl_version
  when: kubernetes_pod_network.cni == 'weave'

- name: Configure Weave networking.
  command: "{{ item }}"
  with_items:
    - "kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version={{ kubectl_version.stdout_lines[0] }}"
  register: weave_result
  changed_when: "'created' in weave_result.stdout"
  when: kubernetes_pod_network.cni == 'weave'

# TODO: Check if taint exists with something like `kubectl describe nodes`
# instead of using kubernetes_init_stat.stat.exists check.
- name: Allow pods on master node (if configured).
  command: "kubectl taint nodes --all node-role.kubernetes.io/master-"
  when:
    - kubernetes_allow_pods_on_master | bool
    - not kubernetes_init_stat.stat.exists

- name: Check if Kubernetes Dashboard UI service already exists.
  shell: kubectl get services --namespace kube-system | grep -q kubernetes-dashboard
  changed_when: false
  failed_when: false
  register: kubernetes_dashboard_service
  when: kubernetes_enable_web_ui | bool

- name: Enable the Kubernetes Web Dashboard UI (if configured).
  command: "kubectl create -f {{ kubernetes_web_ui_manifest_file }}"
  when:
    - kubernetes_enable_web_ui | bool
    - kubernetes_dashboard_service is failed

- name: Get the certificate key for joining controller
  shell: |
    kubeadm init phase upload-certs --upload-certs |grep -v '^[[]'
  changed_when: false
  register: kubernetes_join_certkey_result

- name: Get the kubeadm join command
  shell: |
    kubeadm token create --print-join-command
  changed_when: false
  register: kubernetes_join_command_result

- name: Create facts for joining controllers
  set_fact:
    kubernetes_join_token: "{{ kubernetes_join_command_result.stdout|regex_replace('.*--token (\\S*).*','\\1') }}"
    kubernetes_join_ca_hash: "{{ kubernetes_join_command_result.stdout|regex_replace('.*--discovery-token-ca-cert-hash (\\S*).*','\\1') }}"
    kubernetes_join_certkey: "{{ kubernetes_join_certkey_result.stdout }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups[kubernetes_controllers_group] }}"

- name: Create facts for joining nodes
  set_fact:
    kubernetes_join_command: "{{ kubernetes_join_command_result.stdout }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups[kubernetes_nodes_group] }}"

